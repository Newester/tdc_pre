上游分支master下游分支dev
下游分支更新上游分支内容的时候使用 rebase  git rebase master(master的修改在前，dev的修改依次合入master)
上游分支合并下游分支内容的时候使用 merge git merge dev(按照时间线合入)
更新当前分支的内容时一定要使用 --rebase 参数 git pull --rebase

git cherry-pick -e commit_id 选取要合入的别的分支的某个提交


没有在git 版本控制中的文件，是不能被git stash 存起来的。

（1）git stash save -a "save message"  : 执行存储时，添加备注

（2）git stash list  ：查看stash了哪些存储

（3）git stash show -p或--patch : 显示第一个存储的改动，如果想显示其他存存储，命令：git stash show  stash@{$num}  -p ，比如第二个：git stash show  stash@{1}  -p

（4）git stash apply :应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即stash@{0}，如果要使用其他个，git stash apply stash@{$num} ， 比如第二个：git stash apply stash@{1} 

（5）git stash pop ：命令恢复之前缓存的工作目录，将缓存堆栈中的对应stash删除，并将对应修改应用到当前的工作目录下,默认为第一个stash,即stash@{0}，如果要应用并删除其他stash，命令：git stash pop stash@{$num} ，比如应用并删除第二个：git stash pop stash@{1}

（6）git stash drop stash@{$num} ：丢弃stash@{$num}存储，从列表中删除这个存储

（7）git stash clear ：删除所有缓存的stash


